<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Abap</title>
    <atom:link href="http://coding-abap.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://coding-abap.github.io</link>
    <description>Abap blog</description>
    <pubDate>Mon, 11 May 2015 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Param Hell</title>
      <link>http://coding-abap.github.io/articles/param-hell/</link>
      <pubDate>Mon, 11 May 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://coding-abap.github.io/articles/param-hell/</guid>
      <author></author>
      <description>&lt;p&gt;Loose typing and work with output parameters in function/method inner logic may be fatal&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;the-story&quot;&gt;The Story&lt;/h1&gt;
&lt;p&gt;I was looking for a function to get month’s name from a date and I found &lt;code&gt;HR_IN_GET_DATE_COMPONENTS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coding-abap.github.io/articles/param-hell/hr_in_get_date_components.png&quot; alt=&quot;Playing with `HR_IN_GET_DATE_COMPONENTS` in test mode&quot;&gt;&lt;/p&gt;
&lt;p&gt;In test mode it looked good and I wrote something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;    &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CALL&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FUNCTION&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'HR_IN_GET_DATE_COMPONENTS'&lt;/span&gt;
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXPORTING&lt;/span&gt;&lt;/span&gt;
        idate                         = &lt;span class=&quot;string&quot;&gt;`20150101`&lt;/span&gt; 
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;IMPORTING&lt;/span&gt;&lt;/span&gt;
        ltext                         = lv_month_name
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXCEPTIONS&lt;/span&gt;&lt;/span&gt;
        input_date_is_initial         = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
        text_for_month_not_maintained = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sy-subrc = 2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, oh! In test mode I got ‘January’, but now I get a &lt;code&gt;text_for_month_not_maintained&lt;/code&gt; exception.&lt;/p&gt;
&lt;h1 id=&quot;error-error-error-success&quot;&gt;Error * Error * Error = Success&lt;/h1&gt;
&lt;p&gt;I’ve debugged the code and found something weird&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coding-abap.github.io/articles/param-hell/call_without_param.png&quot; alt=&quot;Calling `HR_IN_GET_DATE_COMPONENTS` without all params&quot;&gt;&lt;/p&gt;
&lt;p&gt;Problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;MONTH&lt;/code&gt; is defined as &lt;code&gt;REFERENCE(MONTH) TYPE  C&lt;/code&gt; in function header, without lenght, but in line 36 is used as a lenght 2 char.&lt;/li&gt;
&lt;li&gt;Use exporting params as working variables&lt;/li&gt;
&lt;li&gt;But the worst thing, related to problem #1, is that the type of the exporting params changes depending on which parameters are assigned &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Call the function with all export params fixed the problem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;    &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CALL&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FUNCTION&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'HR_IN_GET_DATE_COMPONENTS'&lt;/span&gt;
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXPORTING&lt;/span&gt;&lt;/span&gt;
        idate                         = &lt;span class=&quot;string&quot;&gt;`20150101`&lt;/span&gt; 
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;IMPORTING&lt;/span&gt;&lt;/span&gt;
        day                           = lv_day 
        month                         = lv_month
        year                          = lv_year 
        ltext                         = lv_month_name
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXCEPTIONS&lt;/span&gt;&lt;/span&gt;
        input_date_is_initial         = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
        text_for_month_not_maintained = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;January&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, there are the same problems, but &lt;code&gt;MONTH&lt;/code&gt; is supplied and now its type is &lt;code&gt;CHAR2&lt;/code&gt;, so everything is OK&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coding-abap.github.io/articles/param-hell/call_with_param.png&quot; alt=&quot;Calling `HR_IN_GET_DATE_COMPONENTS` with all export params&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;epiologue&quot;&gt;Epiologue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Don’t be lazy, proper typing is mandatory&lt;ul&gt;
&lt;li&gt;If you try to avoid unnecesary casting before function/method calls you can loose typing but you MUST cast ASAP to a typed variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don’t trust function test mode&lt;ul&gt;
&lt;li&gt;In test mode, system is calling conversion routines under the hood&lt;/li&gt;
&lt;li&gt;In test mode, all params are supplied and params type may be “not obvious” &lt;img src=&quot;http://coding-abap.github.io/articles/param-hell/function_test_mode_typing.png&quot; alt=&quot;Function test mode with stange param type&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using paramas as working variables may be harmful&lt;ul&gt;
&lt;li&gt;Clear exporting params ASAP&lt;/li&gt;
&lt;li&gt;Use local variables instead params for inner logic.
Proper typing may mitigate this, but think in params as initial/final state and bind intermediate states (inner logic) to local variables.
In case of error or unexpected behavior, it’s safer maintain output params unpolluted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Dynamic Programming</title>
      <link>http://coding-abap.github.io/articles/dynamic-programming/</link>
      <pubDate>Thu, 23 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://coding-abap.github.io/articles/dynamic-programming/</guid>
      <author></author>
      <description>&lt;p&gt;Reading &lt;a href=&quot;http://help.sap.com/abapdocu_740/en/abennews-710-others.htm#!ABAP_MODIFICATION_9@9@&quot;&gt;SAP docs&lt;/a&gt;,  I’ve found &lt;code&gt;CL_ABAP_DYN_PRG&lt;/code&gt;, an utility class for dynamic programming.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;class-cl_abap_dyn_prg-&quot;&gt;Class &lt;code&gt;CL_ABAP_DYN_PRG&lt;/code&gt;&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Method Name&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_INT_VALUE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is a valid integer (optional sign)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESCAPE_QUOTES&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Escape single quotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESCAPE_QUOTES_STR&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Escape backquotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;QUOTE&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Put single quotes around the value and escape single quotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;QUOTE_STR&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Put backquotes around the value and escape backquotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_COLUMN_NAME&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input can be a column name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_VARIABLE_NAME&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input can be a variable name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_TABLE_NAME_STR&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is a DB table name, check package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_TABLE_NAME_TAB&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is a DB table name, check package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_TABLE_OR_VIEW_NAME_STR&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether input is DB table or view name, check package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_WHITELIST_STR&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is in a whitelist (string version)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_WHITELIST_TAB&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is in a whitelist (table version)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_TABLE_OR_VIEW_NAME_TAB&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether input is DB table or view name, check package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESCAPE_XSS_XML_HTML&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Escape XML/HTML string for XSS safety&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESCAPE_XSS_JAVASCRIPT&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Escape Javascript string for XSS safety&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESCAPE_XSS_CSS&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Escape Cascading Style Sheets string for XSS safety&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESCAPE_XSS_URL&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Escape URL string for XSS safety&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_CHAR_LITERAL&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is a valid type c literal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;CHECK_STRING_LITERAL&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Check whether the input is a valid type string literal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;handling-of-literal-values-in-conditions&quot;&gt;Handling of literal values in conditions&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ESCAPE_QUOTES*&lt;/code&gt; and &lt;code&gt;QUOTE*&lt;/code&gt; methods are useful to sanitize dynamic where clauses&lt;/p&gt;
&lt;p&gt;Without proper input sanitization an SQL exception will raise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;FORM sql_error.
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DATA&lt;/span&gt;&lt;/span&gt;:
    lv_where &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;VALUE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`name1 = '$CITY'`&lt;/span&gt;. &lt;span class=&quot;comment&quot;&gt;&quot;Dynamic condition&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;&quot;Dirty input with invalid characters&lt;/span&gt;
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'$CITY'&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt;&lt;/span&gt; lv_where &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`O'Reilly`&lt;/span&gt;.
  &lt;span class=&quot;comment&quot;&gt;&quot;where clause: name1 = 'O'Reilly'&lt;/span&gt;

  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;TRY&lt;/span&gt;&lt;/span&gt; .
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt; COUNT(*)
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt; t001w
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt; (lv_where).
    &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CATCH&lt;/span&gt;&lt;/span&gt; cx_root.
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WRITE&lt;/span&gt;&lt;/span&gt;: / &lt;span class=&quot;string&quot;&gt;'Dirty Query - SQL Error'&lt;/span&gt;.
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENDTRY&lt;/span&gt;&lt;/span&gt;.
ENDFORM.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Dirty Query - SQL Error&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or worse, there is an SQL Injection open door&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;FORM sql_injection.
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DATA&lt;/span&gt;&lt;/span&gt;:
    lv_where &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;VALUE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`name1 = '$CITY'`&lt;/span&gt;. &lt;span class=&quot;comment&quot;&gt;&quot;Dynamic condition&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;&quot;Forged query to exploit an SQL Injection&lt;/span&gt;
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'$CITY'&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt;&lt;/span&gt; lv_where &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`' OR name1 &amp;lt;&amp;gt; '`&lt;/span&gt;.
  &lt;span class=&quot;comment&quot;&gt;&quot;where clause: name1 = ' ' OR name1 &amp;lt;&amp;gt; ''&lt;/span&gt;

  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;TRY&lt;/span&gt;&lt;/span&gt; .
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt; COUNT(*)
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt; t001w
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt; (lv_where).

      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WRITE&lt;/span&gt;&lt;/span&gt;: / &lt;span class=&quot;string&quot;&gt;'SQL Injection. Number of entries = '&lt;/span&gt; , sy-dbcnt.
    &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CATCH&lt;/span&gt;&lt;/span&gt; cx_root.
      &lt;span class=&quot;comment&quot;&gt;&quot;...&lt;/span&gt;
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENDTRY&lt;/span&gt;&lt;/span&gt;.
ENDFORM.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SQL Injection. Number of entries = 127&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is really dangerous, we could be exposing sensible data. Input sanitization is mandatory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;FORM sql_sanitized.
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DATA&lt;/span&gt;&lt;/span&gt;:
    lv_where &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;VALUE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`name1 = '$CITY'`&lt;/span&gt;. &lt;span class=&quot;comment&quot;&gt;&quot;Dynamic condition&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;&quot;Sanitize input&lt;/span&gt;
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'$CITY'&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt;&lt;/span&gt; lv_where &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;&lt;/span&gt; cl_abap_dyn_prg=&amp;gt;escape_quotes( &lt;span class=&quot;string&quot;&gt;`O'Reilly`&lt;/span&gt; ).
  &lt;span class=&quot;comment&quot;&gt;&quot;where clause: name1 = 'O''Reilly'&lt;/span&gt;

  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;TRY&lt;/span&gt;&lt;/span&gt; .
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;&lt;/span&gt; COUNT(*)
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt; t001w
      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;&lt;/span&gt; (lv_where).

      &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WRITE&lt;/span&gt;&lt;/span&gt;: / &lt;span class=&quot;string&quot;&gt;'Sanitized Query - OK. Number of entries = '&lt;/span&gt; , sy-dbcnt.
    &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CATCH&lt;/span&gt;&lt;/span&gt; cx_root.
      &lt;span class=&quot;comment&quot;&gt;&quot;...&lt;/span&gt;
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENDTRY&lt;/span&gt;&lt;/span&gt;.
ENDFORM.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Sanitized Query - OK. Number of entries = 0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As expected, we have no results&lt;/p&gt;
&lt;h2 id=&quot;handling-of-column-and-variable-names&quot;&gt;Handling of column and variable names&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CHECK_COLUMN*&lt;/code&gt;, &lt;code&gt;CHECK_VARIABLE*&lt;/code&gt; and &lt;code&gt;CHECK_TABLE*&lt;/code&gt; methods are used to check
identifiers generated at runtime.&lt;/p&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ESCAPE_XSS*&lt;/code&gt; methods are mandatory to avoid &lt;strong&gt;XSS injection&lt;/strong&gt; in external resources&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CHECK_INT*&lt;/code&gt;, &lt;code&gt;CHECK_CHAR*&lt;/code&gt; and &lt;code&gt;CHECK_STRING*&lt;/code&gt; are general purpose methods useful in some use cases&lt;/p&gt;
&lt;h3 id=&quot;more-info&quot;&gt;More info&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Class Documentation or&lt;/em&gt; &lt;a href=&quot;https://www.consolut.com/en/s/sap-ides-access/d/s/doc/N-CL_ABAP_DYN_PRG&quot;&gt;Consolut - CL_ABAP_DYN_PRG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;source&quot;&gt;Source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Further Changes in 7.0, EhP2&lt;/em&gt; &lt;a href=&quot;http://help.sap.com/abapdocu_740/en/abennews-710-others.htm#!ABAP_MODIFICATION_9@9@&quot;&gt;SAP docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>File Filter</title>
      <link>http://coding-abap.github.io/articles/file-filter/</link>
      <pubDate>Wed, 14 Jan 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://coding-abap.github.io/articles/file-filter/</guid>
      <author></author>
      <description>&lt;p&gt;Do you remember the exact string to set a file filter in ABAP file chooser? I don’t, but class &lt;code&gt;cl_gui_frontend_services&lt;/code&gt; has some nice predefined class atributes&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;FILETYPE_ALL = &lt;span class=&quot;string&quot;&gt;'All Files (*.*)|*.*|'&lt;/span&gt;
FILETYPE_EXCEL = &lt;span class=&quot;string&quot;&gt;'Microsoft Excel Files (*.XLS;*.XLSX;*.XLSM)|*.XLS;*.XLSX;*.XLSM|'&lt;/span&gt;
FILETYPE_WORD = &lt;span class=&quot;string&quot;&gt;'Microsoft Word Files (*.DOC;*.DOCX;*.DOCM)|*.DOC;*.DOCX;*.DOCM|'&lt;/span&gt;
FILETYPE_TEXT = &lt;span class=&quot;string&quot;&gt;'Text Files (*.TXT)|*.TXT|'&lt;/span&gt;
FILETYPE_HTML = &lt;span class=&quot;string&quot;&gt;'HTML files (*.HTML, *.HTM)|*.HTML;*.HTM|'&lt;/span&gt;
FILETYPE_RTF = &lt;span class=&quot;string&quot;&gt;'RTF Files (*.RTF)|*.RTF|'&lt;/span&gt;
FILETYPE_XML = &lt;span class=&quot;string&quot;&gt;'XML (*.XML)|*.XML|'&lt;/span&gt;
FILETYPE_POWERPOINT = &lt;span class=&quot;string&quot;&gt;'Microsoft PowerPoint Files (*PPT;*.PPTX;*.PPTM)|*PPT;*.PPTX;*.PPTM|'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-abap&quot;&gt;cl_gui_frontend_services=&amp;gt;file_open_dialog(
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXPORTING&lt;/span&gt;&lt;/span&gt;
    file_filter             =  cl_gui_frontend_services=&amp;gt;FILETYPE_EXCEL
    multiselection          =  &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;space&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CHANGING&lt;/span&gt;&lt;/span&gt;
    file_table              =  lt_files
    rc                      =  lv_subrc
    user_action             =  lv_user_action
  &lt;span class=&quot;simple&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;EXCEPTIONS&lt;/span&gt;&lt;/span&gt;
    file_open_dialog_failed = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
    cntl_error              = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
    error_no_gui            = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;
    not_supported_by_gui    = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;
    OTHERS                  = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Extra point for supporting multiple file extensions&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/file-filter/file_filter.png&quot; alt=&quot;Excel file filter in action&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Regular expressions</title>
      <link>http://coding-abap.github.io/articles/regular-expressions/</link>
      <pubDate>Sat, 10 Jan 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://coding-abap.github.io/articles/regular-expressions/</guid>
      <author></author>
      <description>&lt;p&gt;To play with regular expressions in ABAP, see program &lt;code&gt;demo_regex_toy&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/articles/regular-expressions/demo_regex_toy.png&quot; alt=&quot;demo_regex_toy running&quot; title=&quot;demo_regex_toy running&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;more-info&quot;&gt;More info&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://scn.sap.com/docs/DOC-10319&quot;&gt;Regular Expression Processing in ABAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scn.sap.com/docs/DOC-10291&quot;&gt;Regex Toy- Testing Regular Expressions In ABAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.debuggex.com&quot;&gt;Debuggex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;source&quot;&gt;Source&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Regular Expressions (Regex) and its use in ABAP&lt;/em&gt; - &lt;a href=&quot;http://sapignite.com/regex-in-abap/&quot;&gt;SAP IGNITE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>